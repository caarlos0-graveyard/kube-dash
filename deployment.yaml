---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-dash
  namespace: kube-system
  labels:
    app: kube-dash

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-dash
  namespace: kube-system
  labels:
    app: kube-dash
subjects:
- kind: ServiceAccount
  name: kube-dash
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-dash

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-dash
  namespace: kube-system
  labels:
    app: kube-dash
rules:
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - list
  - update

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-dash
  namespace: kube-system
  labels:
    app: kube-dash
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: kube-dash
  template:
    metadata:
      labels:
        app: kube-dash
    spec:
      hostNetwork: true
      serviceAccountName: kube-dash
      containers:
      - name: kube-dash
        image: caarlos0/kube-dash:latest
        resources:
          requests:
            cpu: "0.01"
            memory: "20Mi"
          limits:
            cpu: "0.1"
            memory: "20Mi"

---

apiVersion: v1
kind: Service
metadata:
  name: kube-dash
  namespace: kube-system
  labels:
    app: kube-dash
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 6789
  selector:
    app: kube-dash
  type: NodePort

---

# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   annotations:
#     ingress.kubernetes.io/ssl-redirect: "false"
#     kubernetes.io/ingress.class: traefik
#   name: kube-dash
#   namespace: kube-system
#   labels:
#     app: kube-dash
# spec:
#   rules:
#   - host: dash.foo.bar
#     http:
#       paths:
#       - backend:
#           serviceName: kube-dash
#           servicePort: 80
